---      
- name: Install docker engine and run a container
  hosts: host1
  vars_files:
    - variables.yml
  tasks:
    - block:
        - name: upgrade repo
          apt: update_cache=true force_apt_get=true
        - name: install-dependencies
          apt:
            pkg:
              - curl
              - gnupg
              - ca-certificates

        - name: add docker GPG key
          apt_key:
            url: https://download.docker.com/linux/ubuntu/gpg
            state: present
            keyring: /etc/apt/keyrings/docker.gpg

        - name: ubuntu version
          shell: echo "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable""
          register: ubuntuversion

        - name: architecture
          shell: echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu"
          register: ubuntuarch

        - debug: var=ubuntuversion
        - debug: var=ubuntuarch

        - name: add docker repo
          apt_repository: 
            repo: '{{ ubuntuarch.stdout }} {{ ubuntuversion.stdout }}'
            state: present
              
        - name: update repo
          apt: update_cache=true force_apt_get=true
        
        - name: install docker and co
          apt:
            pkg:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
        - name: start docker
          service:
            name: docker
            state: started
            enabled: yes
        - name: add user to docker group
          user:
            name: '{{ user }}'
            append: yes
            groups: docker

        - name: pull the application
          docker_container:
            name: '{{ container-name }}'
            auto_remove: yes
            detach: yes
            image: '{{ docker-image }}'
            network_mode: bridge
            published_ports: 
            - '{{ port-binding }}'
            pull: yes
  
      when: ansible_distribution == "Ubuntu"
      rescue:
        - debug:
            msg: "Playbook has failed for {{ inventory_hostname}} node" 
